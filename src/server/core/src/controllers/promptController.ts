import { Request, Response } from "express";
import { z } from "zod";
import { serializeBigIntObject } from "../utils/serialization";

const prisma = require("../../prisma/client");

const PromptBody = z.object({
  prompt_text: z.string(),
  response_text: z.string().optional(),
  purpose: z.string().optional(),
});

const OptimizePromptBody = z.object({
  user_message: z.string().max(1000),
  context_type: z
    .enum(["nutrition", "fitness", "health", "general"])
    .optional(),
  include_profile: z.boolean().optional(),
});

export class PromptController {
  // POST /prompts
  static async createPrompt(req: Request, res: Response) {
    try {
      const user_id = (req as any).userId as bigint;
      const p = PromptBody.safeParse(req.body);
      if (!p.success) return res.status(400).json({ error: p.error.flatten() });

      const saved = await prisma.prompts.create({
        data: {
          user_id,
          prompt_text: p.data.prompt_text,
          response_text: p.data.response_text ?? null,
          purpose: p.data.purpose ?? null,
        },
      });

      // Serialize BigInt fields
      const serializedSaved = serializeBigIntObject(saved);
      res.json({ id: serializedSaved.id });
    } catch (error) {
      res.status(500).json({ error: "Internal server error" });
    }
  }

  // GET /prompts - L·∫•y prompt history c·ªßa user
  static async getUserPrompts(req: Request, res: Response) {
    try {
      const user_id = (req as any).userId as bigint;
      const limit = Math.min(50, Math.max(1, Number(req.query.limit || 20)));
      const purpose = req.query.purpose as string;

      const where: any = { user_id };
      if (purpose) where.purpose = purpose;

      const prompts = await prisma.prompts.findMany({
        where,
        orderBy: { created_at: "desc" },
        take: limit,
        select: {
          id: true,
          prompt_text: true,
          response_text: true,
          purpose: true,
          created_at: true,
        },
      });

      // Serialize BigInt fields
      const serializedPrompts = serializeBigIntObject(prompts);
      res.json({ prompts: serializedPrompts, total: prompts.length });
    } catch (error) {
      res.status(500).json({ error: "Internal server error" });
    }
  }

  // POST /prompts/optimize - T·ªëi ∆∞u prompt cho AI response t·ªët h∆°n
  static async optimizePrompt(req: Request, res: Response) {
    try {
      const user_id = (req as any).userId as bigint;
      const p = OptimizePromptBody.safeParse(req.body);
      if (!p.success) return res.status(400).json({ error: p.error.flatten() });

      const { user_message, context_type, include_profile } = p.data;

      // L·∫•y profile n·∫øu c·∫ßn
      let profileContext = "";
      if (include_profile !== false) {
        const profile = await prisma.profiles.findUnique({
          where: { user_id },
        });
        if (profile) {
          const bmi = Number(profile.bmi || 0);
          const bmiCategory =
            bmi < 18.5
              ? "thi·∫øu c√¢n"
              : bmi < 25
              ? "b√¨nh th∆∞·ªùng"
              : bmi < 30
              ? "th·ª´a c√¢n"
              : "b√©o ph√¨";

          profileContext = `
üîç Context ng∆∞·ªùi d√πng:
- Th·ªÉ ch·∫•t: ${profile.sex}, ${profile.height_cm}cm, ${profile.weight_kg}kg, BMI ${bmi} (${bmiCategory})
- M·ª•c ti√™u: ${profile.goal} | Ho·∫°t ƒë·ªông: ${profile.activity_level} | TDEE: ${profile.tdee} kcal/ng√†y`;

          // Parse constraints
          const allergies = profile.allergies_json
            ? (profile.allergies_json as string[])
            : [];
          const conditions = profile.conditions_json
            ? (profile.conditions_json as string[])
            : [];

          if (allergies.length > 0)
            profileContext += `\n- D·ªã ·ª©ng: ${allergies.join(", ")}`;
          if (conditions.length > 0)
            profileContext += `\n- T√¨nh tr·∫°ng: ${conditions.join(", ")}`;
        }
      }

      // Context-specific prompt optimization
      const contextPrompts = {
        nutrition: [
          "ü•ó Tr·∫£ l·ªùi v·ªÅ dinh d∆∞·ª°ng v·ªõi s·ªë li·ªáu c·ª• th·ªÉ (kcal, protein, carbs, fat)",
          "üö´ Lu√¥n ki·ªÉm tra allergies v√† medical conditions tr∆∞·ªõc khi g·ª£i √Ω",
          "üéØ Align v·ªõi m·ª•c ti√™u user (lose/gain/maintain weight)",
          "üìä Suggest portion sizes v√† meal timing ph√π h·ª£p",
        ],
        fitness: [
          "üí™ ƒê∆∞a workout suggestions d·ª±a tr√™n activity level",
          "‚è±Ô∏è Include duration, intensity v√† frequency c·ª• th·ªÉ",
          "üî• Estimate calories burned cho m·ªói exercise",
          "üéØ Align v·ªõi fitness goals v√† current fitness level",
        ],
        health: [
          "üè• Provide evidence-based health information",
          "‚ö†Ô∏è Disclaimer: kh√¥ng thay th·∫ø medical advice",
          "üîç Focus on prevention v√† healthy lifestyle",
          "üìã Consider existing medical conditions",
        ],
        general: [
          "üí° Tr·∫£ l·ªùi helpful v√† informative",
          "üéØ C√° nh√¢n h√≥a response d·ª±a tr√™n user context",
          "üìä Include relevant data points khi c√≥ th·ªÉ",
          "üåü Encourage healthy habits v√† positive mindset",
        ],
      };

      const selectedContext = context_type || "general";
      const contextRules = contextPrompts[selectedContext];

      const optimizedPrompt = `
${contextRules.join("\n")}

${profileContext}

‚ùì User question: "${user_message}"

üéØ H√£y tr·∫£ l·ªùi v·ªõi:
- Th√¥ng tin ch√≠nh x√°c v√† c·ª• th·ªÉ
- S·ªë li·ªáu r√µ r√†ng khi ph√π h·ª£p  
- T√¥n tr·ªçng health constraints c·ªßa user
- Tone t·ª± nhi√™n, friendly nh∆∞ng professional
- Actionable advice user c√≥ th·ªÉ apply ngay`;

      // L∆∞u optimized prompt ƒë·ªÉ tracking
      const saved = await prisma.prompts.create({
        data: {
          user_id,
          prompt_text: optimizedPrompt,
          purpose: `optimized_${selectedContext}`,
        },
      });

      // Serialize BigInt fields
      const serializedSaved = serializeBigIntObject(saved);
      res.json({
        optimized_prompt: optimizedPrompt,
        original_message: user_message,
        context_applied: selectedContext,
        has_profile_context: !!profileContext,
        prompt_id: serializedSaved.id,
      });
    } catch (error) {
      res.status(500).json({ error: "Internal server error" });
    }
  }

  // GET /prompts/templates - Cung c·∫•p prompt templates cho different use cases
  static async getPromptTemplates(req: Request, res: Response) {
    try {
      const category = (req.query.category as string) || "all";

      const templates = {
        nutrition: [
          {
            name: "Meal Planning",
            template:
              "G·ª£i √Ω th·ª±c ƒë∆°n {meal_type} cho m·ª•c ti√™u {goal} v·ªõi {calories} kcal, tr√°nh {allergies}",
            variables: ["meal_type", "goal", "calories", "allergies"],
            example:
              "G·ª£i √Ω th·ª±c ƒë∆°n breakfast cho m·ª•c ti√™u lose v·ªõi 400 kcal, tr√°nh nuts",
          },
          {
            name: "Macro Analysis",
            template:
              "Ph√¢n t√≠ch macro c·ªßa m√≥n {food_name} v√† ƒë√°nh gi√° ph√π h·ª£p cho {goal}",
            variables: ["food_name", "goal"],
            example:
              "Ph√¢n t√≠ch macro c·ªßa m√≥n c∆°m g√† v√† ƒë√°nh gi√° ph√π h·ª£p cho lose weight",
          },
          {
            name: "Progress Review",
            template:
              "Review ti·∫øn tr√¨nh {days} ng√†y qua: ƒë√£ ƒÉn {avg_calories} kcal/ng√†y, m·ª•c ti√™u {target_calories}",
            variables: ["days", "avg_calories", "target_calories"],
            example:
              "Review ti·∫øn tr√¨nh 7 ng√†y qua: ƒë√£ ƒÉn 1800 kcal/ng√†y, m·ª•c ti√™u 1600",
          },
        ],
        fitness: [
          {
            name: "Workout Planning",
            template:
              "Thi·∫øt k·∫ø workout {duration} ph√∫t cho {goal} v·ªõi equipment {equipment}",
            variables: ["duration", "goal", "equipment"],
            example:
              "Thi·∫øt k·∫ø workout 30 ph√∫t cho weight loss v·ªõi equipment dumbbells",
          },
          {
            name: "Exercise Analysis",
            template:
              "Ph√¢n t√≠ch exercise {exercise_name}: calories burned, muscle groups, difficulty level",
            variables: ["exercise_name"],
            example:
              "Ph√¢n t√≠ch exercise burpees: calories burned, muscle groups, difficulty level",
          },
        ],
        health: [
          {
            name: "Symptom Assessment",
            template:
              "ƒê√°nh gi√° symptoms {symptoms} v√† g·ª£i √Ω lifestyle adjustments",
            variables: ["symptoms"],
            example:
              "ƒê√°nh gi√° symptoms m·ªát m·ªèi, kh√≥ ng·ªß v√† g·ª£i √Ω lifestyle adjustments",
          },
          {
            name: "Habit Formation",
            template:
              "H∆∞·ªõng d·∫´n x√¢y d·ª±ng habit {habit_name} trong {timeframe} v·ªõi {current_level}",
            variables: ["habit_name", "timeframe", "current_level"],
            example:
              "H∆∞·ªõng d·∫´n x√¢y d·ª±ng habit drink more water trong 21 ng√†y v·ªõi beginner level",
          },
        ],
      };

      const result =
        category === "all"
          ? templates
          : { [category]: templates[category as keyof typeof templates] || [] };

      res.json({
        templates: result,
        categories: Object.keys(templates),
        usage:
          "S·ª≠ d·ª•ng {variable} trong template v√† replace v·ªõi gi√° tr·ªã th·ª±c t·∫ø",
      });
    } catch (error) {
      res.status(500).json({ error: "Internal server error" });
    }
  }

  // GET /healthz
  static async healthCheck(req: Request, res: Response) {
    try {
      await prisma.$queryRaw`SELECT 1`;
      res.json({ ok: true, timestamp: new Date().toISOString() });
    } catch (e) {
      res.status(500).json({ ok: false, error: "Database connection failed" });
    }
  }
}
